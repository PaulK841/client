const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const User = require('../models/User'); // Assurez-vous d'importer le mod√®le User

/**
 * Cr√©e une session de paiement Stripe pour un ABONNEMENT avec frais d'installation.
 */
const createSubscriptionSession = async (req, res) => {
    // --- CODE DE D√âBOGAGE AJOUT√â ---
    console.log('\n========================================');
    console.log('üèÅ Tentative de cr√©ation de session Stripe...');
    console.log('========================================');
    
    // 1. V√©rifier si la cl√© secr√®te Stripe est charg√©e
    const stripeKey = process.env.STRIPE_SECRET_KEY;
    if (!stripeKey) {
        console.error('‚ùå ERREUR FATALE : La variable STRIPE_SECRET_KEY est manquante ou vide !');
    } else {
        console.log('‚úÖ Cl√© secr√®te Stripe charg√©e.');
        // Affiche une version "masqu√©e" de la cl√© pour v√©rification (ex: sk_test_...1234)
        console.log(`   Cl√© utilis√©e: ${stripeKey.substring(0, 11)}...${stripeKey.slice(-4)}`);
        if (stripeKey.startsWith('whsec_')) {
            console.error('üö® ALERTE : Vous utilisez la cl√© de webhook (whsec_) au lieu de la cl√© secr√®te (sk_) !');
        }
    }

    // 2. V√©rifier les IDs de prix re√ßus du frontend
    const { subscriptionPriceId, setupFeePriceId } = req.body;
    console.log('üì• IDs de prix re√ßus du frontend:');
    console.log('   - ID Abonnement:', subscriptionPriceId);
    console.log('   - ID Frais mat√©riel:', setupFeePriceId);

    // 3. V√©rifier l'URL client pour la redirection
    const clientUrl = process.env.CLIENT_URL;
    if (!clientUrl) {
        console.error('‚ùå ERREUR FATALE : La variable CLIENT_URL est manquante !');
    } else if (!clientUrl.startsWith('http')) {
        console.error(`üö® ALERTE : La variable CLIENT_URL ("${clientUrl}") ne commence pas par http:// ou https://`);
    } else {
        console.log('‚úÖ URL de redirection client charg√©e:', clientUrl);
    }

    console.log('========================================\n');
    // --- FIN DU CODE DE D√âBOGAGE ---

    try {
        const userId = req.user.id; // Depuis le middleware d'authentification

        if (!subscriptionPriceId || !setupFeePriceId) {
            return res.status(400).json({ error: "Subscription and setup fee price IDs are required." });
        }

        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ error: "User not found." });
        }

        let customerId = user.stripeCustomerId;

        // Si l'utilisateur n'a pas encore de stripeCustomerId, on en cr√©e un
        if (!customerId) {
            const customer = await stripe.customers.create({
                email: user.email,
                name: user.username,
                metadata: {
                    mongoId: userId,
                },
            });
            customerId = customer.id;
            user.stripeCustomerId = customerId;
            await user.save();
        }

        // Cr√©er la session Stripe en mode abonnement
        const session = await stripe.checkout.sessions.create({
            mode: 'subscription',
            customer: customerId,
            payment_method_types: ['card'],
            line_items: [
                // L'abonnement mensuel
                {
                    price: subscriptionPriceId,
                    quantity: 1,
                },
                // Les frais d'installation uniques
                {
                    price: setupFeePriceId,
                    quantity: 1,
                },
            ],
            success_url: `${process.env.CLIENT_URL}/payment-success?session_id={CHECKOUT_SESSION_ID}`,
            cancel_url: `${process.env.CLIENT_URL}/payment-cancel`,
            metadata: {
                userId: userId,
            },
        });

        res.json({ sessionId: session.id, url: session.url });
    } catch (error) {
        console.error('‚ùå Erreur Stripe (Cr√©ation Abonnement):', error.message);
        res.status(500).json({ error: 'Error creating the payment session.' });
    }
};

/**
 * G√®re les webhooks entrants de Stripe pour mettre √† jour la base de donn√©es.
 */
const handleWebhook = async (req, res) => {
    const sig = req.headers['stripe-signature'];
    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;
    let event;

    try {
        event = stripe.webhooks.constructEvent(req.body, sig, webhookSecret);
    } catch (err) {
        console.error(`‚ùå Erreur Webhook Stripe: ${err.message}`);
        return res.status(400).send(`Webhook Error: ${err.message}`);
    }

    // G√©rer les √©v√©nements sp√©cifiques
    switch (event.type) {
        case 'checkout.session.completed':
            const session = event.data.object;
            const user = await User.findOne({ stripeCustomerId: session.customer });
            
            if (user) {
                user.stripeSubscriptionId = session.subscription;
                user.subscriptionStatus = 'active';
                // La date d'expiration sera g√©r√©e par l'√©v√©nement 'invoice.payment_succeeded'
                await user.save();
                console.log(`‚úÖ Abonnement activ√© pour l'utilisateur: ${user.email}`);
            }
            break;

        case 'invoice.payment_succeeded':
            const invoice = event.data.object;
            const subscriptionId = invoice.subscription;
            
            // La p√©riode de l'abonnement est en secondes, on la convertit en millisecondes
            const periodEnd = new Date(invoice.lines.data[0].period.end * 1000);
            
            await User.findOneAndUpdate(
                { stripeSubscriptionId: subscriptionId },
                { 
                    subscriptionStatus: 'active',
                    subscriptionExpiresAt: periodEnd 
                }
            );
            console.log(`‚úÖ Date d'expiration mise √† jour pour l'abonnement: ${subscriptionId}`);
            break;

        case 'customer.subscription.deleted':
            const subscription = event.data.object;
            await User.findOneAndUpdate(
                { stripeSubscriptionId: subscription.id },
                { 
                    subscriptionStatus: 'cancelled',
                    // On peut garder la date d'expiration pour savoir jusqu'√† quand ils avaient acc√®s
                }
            );
            console.log(`üîå Abonnement annul√©: ${subscription.id}`);
            break;

        default:
            console.log(`√âv√©nement webhook non g√©r√©: ${event.type}`);
    }

    res.json({ received: true });
};


// V√©rifier le statut du paiement
const verifyPayment = async (req, res) => {
    try {
        const { sessionId } = req.params;

        const session = await stripe.checkout.sessions.retrieve(sessionId);

        if (session.payment_status === 'paid') {
            // Le paiement est r√©ussi, mettre √† jour l'utilisateur
            res.json({ 
                success: true, 
                paymentStatus: 'paid',
                customerEmail: session.customer_email,
                amount: session.amount_total,
                currency: session.currency
            });
        } else {
            res.json({ 
                success: false, 
                paymentStatus: session.payment_status 
            });
        }
    } catch (error) {
        console.error('Erreur v√©rification paiement:', error);
        res.status(500).json({ error: 'Erreur lors de la v√©rification du paiement' });
    }
};

// Cr√©er un produit et un prix (pour l'admin)
const createProduct = async (req, res) => {
    try {
        const { name, description, price, currency = 'eur' } = req.body;

        // Cr√©er le produit
        const product = await stripe.products.create({
            name: name,
            description: description,
        });

        // Cr√©er le prix
        const priceObj = await stripe.prices.create({
            product: product.id,
            unit_amount: price * 100, // Stripe utilise les centimes
            currency: currency,
        });

        res.json({ 
            productId: product.id, 
            priceId: priceObj.id,
            product: product,
            price: priceObj
        });
    } catch (error) {
        console.error('Erreur cr√©ation produit:', error);
        res.status(500).json({ error: 'Erreur lors de la cr√©ation du produit' });
    }
};

// R√©cup√©rer les produits Stripe
const getProducts = async (req, res) => {
    try {
        const products = await stripe.products.list({
            active: true,
            expand: ['data.default_price']
        });

        res.json({ products: products.data });
    } catch (error) {
        console.error('Erreur r√©cup√©ration produits:', error);
        res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration des produits' });
    }
};

module.exports = {
    createPaymentSession: createSubscriptionSession, // On renomme pour garder la compatibilit√©
    verifyPayment,
    createProduct,
    getProducts,
    handleWebhook
};
